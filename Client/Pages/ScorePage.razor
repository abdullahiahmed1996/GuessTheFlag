@page "/score"
@inject IUserService userService
@inject NavigationManager navManager


<body class="main-background">
    <img class="backgroundpic" src="Images/Background.jpg" ); alt="backgroundpic" />
    <div class="blue-box text-center">
        <h1 class="gtfHeader text-white mt-1">Your Score</h1>
        <hr />
       <div class="print-points">
            <label class="text-white scoreHeader">  
                @score
            </label>
       </div>
        <div class="buttons">
            <hr />
            <button @onclick="PlayAgain" type="button" class="btn btn-play btn-light ">
                Play again
            </button>
            <br />
            <button @onclick="StopPlaying" type="button" class="btn btn-stopplaying btn-light mt-3">
                Stop playing
            </button>
        </div>
    </div>
</body>



@code {
    private int score;
    private string username; 


    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        username = queryString["username"];
        score = int.Parse(queryString["score"]);
    }


    private async Task SaveScore()
    {
        try
        {
            var savedScore = new UserModel { Username = username, Score = score };
            await userService.SaveScoreAsync(savedScore);

        }
        catch(Exception ex)
        {
            Console.WriteLine($"The score was not saved! Exception: {ex.Message}");
        }
    }

    private void PlayAgain()
    {
        SaveScore();
        navManager.NavigateTo($"/guesstheflag?username={Uri.EscapeDataString(username)}"); // navigera till startsidan guess the flag
        
    }

    private void StopPlaying()
    {
        SaveScore();
        navManager.NavigateTo("/");
    }

}
