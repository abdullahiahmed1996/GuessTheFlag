@page "/guesstheflag"
@inject ICountryService countryService
@inject IFlagService flagService
@inject IUserService userService
@inject NavigationManager navManager


<body class="game-container">
    <img class="fullscreen-image" src="Images/Background.jpg" alt="Background Image" />
    <div class="blue-box text-center">
        <div class="data-container">
            <div class="score">
                @($"Score: {score}")
                <div class="questions-container">
                    @($" Current flag: {currentQuestion}/{totalQuestions}")
                </div>
            </div>
            
        </div>
        <div class="guess-container">
            Total guesses: @guessed
        </div>
        <div class="flag">
            <hr />
            @if (currentFlag != null)
            {
                <img class="flag-image" src="Images/@currentFlag.ImgUrl" alt="Flag" />
            }
        </div>
        <div class="options-container">
            @if (options != null)
            {
                <div class="btn btn-options">
                    @foreach (var option in options)
                    {
                        <button class="option @(correctAnswerSelected && option.Id == (currentFlag?.Country.Id ?? -1) ? "correctAnswer" : "")
                        @(IsSelectedWrongAnswer(option) ? "wrongAnswer" : "")" @onclick="() => CheckAnswer(option)" @key="option.Id">
                            @option.Name
                        </button>
                    }
                </div>
                
            }

        </div>

        @if (isLastQuestionAnswered)
        {
            @if (showFinishBtton)
            {
                <button class="btn btn-success" id="exitBtn" @onclick="GoToScore">Finish</button>

            }
        }
        else
        {
            @if (showNextButton)
            {
                <hr />
                <button class="btn btn-success" id="nextBtn" @onclick="NextFlag">Next</button>
            }
        }
       
    </div>
    
   
</body>


@code {
    private List<CountryModel>? options;
    private FlagModel? currentFlag;
    private string username;
    private int score = 0;
    private int guessed = 0;
    private int totalGuesses = 1000;
    private int totalQuestions = 10;
    private int currentQuestion = 1;
    private int selectedWrongAnswerId = -1;
    private bool showNextButton = false;
    private bool showFinishBtton = false;
    private bool wrongAnswerSelected = false;
    private bool correctAnswerSelected = false;
    private bool correctAnswerGuessed = false;
    private bool isLastQuestionAnswered = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadNextFlag();
        var uri = new Uri(navManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        username = queryString["username"];
    }

    private async Task LoadNextFlag()
    {
        correctAnswerGuessed = false;

        // Hämta en ny flagga och slumpa alternativen 
        currentFlag = await flagService.GetRandomFlagAsync();

        // Hämta 4 slumpmässiga länder
        var countries = await countryService.GetRandomCountriesAsync(3);

        // Lägg till rätta landet till flaggan bland alternativen
        countries.Add(currentFlag.Country);

        // Slumpa alternativen 
        options = countries.OrderBy(c => Guid.NewGuid()).ToList();
    }

    private void CheckAnswer(CountryModel selectedCountry)
    {
        if (selectedCountry.Id == (currentFlag?.CountryId ?? -1))
        {
            if (!correctAnswerGuessed && !wrongAnswerSelected)
            {
                score++;
                correctAnswerGuessed = true;
            }

            // Rätt svar ger poäng och ökar antal gissningar
            //score++;
            showNextButton = true;
            wrongAnswerSelected = false;
            correctAnswerSelected = true;

            if (currentQuestion == totalQuestions)
            {
                isLastQuestionAnswered = true;
            }
        }
        else
        {
            // Fel svar! Gör alternativet rött och fortsätt gissa
            wrongAnswerSelected = true;
            correctAnswerSelected = false;
            selectedWrongAnswerId = selectedCountry.Id;
        }
        guessed++;

        if (currentQuestion == totalQuestions)
        {
            // Visa nästa sida
            showFinishBtton = true;
        }

        StateHasChanged();
    }

    private async Task NextFlag()
    {
        ResetUI();
        await LoadNextFlag();
        showNextButton = false;
        currentQuestion++;
    }

    private void ResetUI()
    {
        correctAnswerSelected = false;
        wrongAnswerSelected = false;
    }

    private bool IsSelectedWrongAnswer(CountryModel option)
    {
        // Check if the option is the selected incorrect answer
        return option.Id == selectedWrongAnswerId;
    }
    private void GoToScore()
    {
        navManager.NavigateTo($"/score?username={Uri.EscapeDataString(username)}&score={score}");
    }

}
